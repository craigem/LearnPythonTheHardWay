## Keywords
and			boolean operator evaluating two values
not			boolean operator that yields true if the argument is fales and vice versa
while		repeats execution as long as anexpresssion is true
as			used with "with" to specify a target
global		a declaration that holds for the entire current block of code
or			if first value is not true, it will evaluate the second value
with		used to wrap the execution of a block with methods defined by a context manager
assert		insert debugging assertions
pass		is a null operation - useful as a placeholder.
yield		used when defining a generator function
break		terminates nearest enclosing for or while loop
except		specifies exception handlers in a try statement
class		commences defining a class object
in			Comparison operator testing for collection membership
raise		if no expressions are present, re-raises the last exception in te current scope.
continue	continues with the next cycle of the nearest enclosing loop of a for / while loop.
finally		specifies a cleanup handler in a try clause
return 		leaves the current function call with the expression list (or "none")
lambda		creates an anonymous expression
try			specifies exception handlers and/or cleanup code.
is			comparison operator

## Data Types
For data types, write out what makes up each one. For example, with strings write out how you create a string. For numbers write out a few numbers.

True	Whether the result of a statement is True
False	Whether the result of a statement is False
None	An empty expression list
strings	For data types, write out what makes up each one. For example, with striA literal value of content to manipulated
numbers	
floats	Floating point integers stored as binary numbers
lists	a sequence data type i\with multiple elements

## String Escape Sequences
For string escape sequences, use them in strings to make sure they do what you think they do.

\\	Escapes the \ character
\'	Escapes the ' character
\"	Escapes the " character
\b	ASCII Backspace
\f	ASCII formfeed
\r	ASCII Carriage Return
\t	ASCII Horizontal Tan
\v	ASCII Vertical Tab

## String Formats
Same thing for string formats: use them in some strings to know what they do.

%i	
%o	Octal format
%u
%x	Hex format - lower case above 9
%X	Hex format - upper cae above 9
%e	Exponent notation - using e as the separator
%E	Exponont notation - using E as the separator
%f	Displays the number as a fixed point number.
%F	Same as "f"
%g	General format
%G	Same as "g" except switches to "E" if the number gets too large.
%c	Converts integer to character
%r
%%	Multiplies the number by 100 and displays in fixed format with a % sign.

## Operators
Some of these may be unfamiliar to you, but look them up anyway. Find out what they do, and if you still can't figure it out, save it for later.

+	Addition
-	Subtraction
**	Exponentiation (power) operator
/	Division
//	Truncating division
%	Returns the remainder from a division
>	greater than comparison
!=	is not equal to comparison
( )	binding or tuple display
{ }	key display
@	
,
:
.
;
+=
-=	
*=
/=
//=
%=
**=
