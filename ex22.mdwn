print
* evaluates each expression in turn and writes the resulting object to standard output

"" or ''
* indicates that the text in between is a string.

#
* states that all following test is a comment and should not be executed

=
* Equals statement, used for setting variable values

+
* Addition 

-
* Subtraction

*
* Multiplication

%
* remainder of x / y 
* string formatting or interpolation operator. Given format % values (where format is a string or Unicode object), % conversion specifications in format are replaced with zero or more elements of values.

/
* quotient ie: x / y is x divided by y

<
* Strictly less than

>
* Strictly greater than

>=
* greater than or equal to

<=
* less than or equal to

%d

%r

%s
"""

\t

\
raw_input()
import...from...
* Import statements are executed in two steps: (1) find a module, and initialize it if necessary; (2) define a name or names in the local namespace (of the scope where the import statement occurs). The statement comes in two forms differing on whether it uses the from keyword. The first form (without from) repeats these steps for each identifier in the list. The form with from performs step (1) once, and then performs step (2) repeatedly.

sys 
argv
prompt
open
.write
.truncate
.close
os.path
exists
.read
def
(*args)
.seek
.readline
\n

